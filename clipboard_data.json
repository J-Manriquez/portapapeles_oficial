{
    "groups": {
        "7293acc6-2e0d-492e-bfbb-07971be03980": {
            "name": "hola",
            "items": [
                {
                    "id": "64bd3ac3-d0e1-49e9-abe6-1f704da4bc7e",
                    "text": {
                        "text": "groups\": {},\r\n    \"pinned_items\": {},\r\n    \"settings\": {\r\n        \"height\": 400,\r\n        \"width\": 295,\r\n        \"hotkey\": \"z\"\r\n    } jajajaja",
                        "formatted": {}
                    },
                    "name": ""
                },
                {
                    "id": "a02a9a7a-abb6-4879-ad5a-861ecea110e4",
                    "text": {
                        "text": "def show_group_content(self, group_id):\r\n        if self.content_window is None or not self.content_window.winfo_exists():\r\n            self.content_window = tk.Toplevel(self.master)\r\n            self.content_window.title(f\"Contenido del Grupo: {self.clipboard_manager.group_manager.groups[group_id]['name']}\")\r\n            \r\n            window_width = self.settings_manager.settings['width']\r\n            window_height = self.settings_manager.settings['height']\r\n            \r\n            x = self.clipboard_manager.window_x + 20\r\n            y = self.clipboard_manager.window_y + 20\r\n            \r\n            self.content_window.geometry(f\"{window_width}x{window_height}+{x}+{y}\")\r\n                    \r\n            self.content_window.overrideredirect(True)\r\n            self.content_window.configure(bg=self.theme_manager.colors['dark']['bg'])\r\n            self.content_window.attributes('-topmost', True)\r\n\r\n            # Barra de t\u00edtulo personalizada\r\n            title_frame = tk.Frame(self.content_window, bg=self.theme_manager.colors['dark']['bg'])\r\n            title_frame.pack(fill=tk.X, padx=6, pady=(0,0))\r\n\r\n            title_label = tk.Label(title_frame, text=f\"Grupo: {self.clipboard_manager.group_manager.groups[group_id]['name']}\", \r\n                                font=('Segoe UI', 10, 'bold'),\r\n                                bg=self.theme_manager.colors['dark']['bg'],\r\n                                fg=self.theme_manager.colors['dark']['fg'])\r\n            title_label.pack(side=tk.LEFT, padx=5, pady=5)\r\n\r\n            close_button = tk.Button(title_frame, text=\"\u274c\", command=lambda: self.close_content_window(group_id),\r\n                                    font=('Segoe UI', 10, 'bold'),bd=0, padx=10, width=5, height=2,\r\n                                    bg=self.theme_manager.colors['dark']['button_bg'],\r\n                                    fg=self.theme_manager.colors['dark']['button_fg'])\r\n            close_button.pack(side=tk.RIGHT)\r\n\r\n            # Canvas y scroll para los items\r\n            self.canvas = tk.Canvas(self.content_window, bg=self.theme_manager.colors['dark']['bg'], highlightthickness=0)\r\n            self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\r\n\r\n            self.scrollbar = ttk.Scrollbar(self.content_window, orient=\"vertical\", command=self.canvas.yview)\r\n            self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\r\n\r\n            self.canvas.configure(yscrollcommand=self.scrollbar.set)\r\n\r\n            self.items_frame = tk.Frame(self.canvas, bg=self.theme_manager.colors['dark']['bg'])\r\n            self.canvas.create_window((0, 0), window=self.items_frame, anchor='nw', width=window_width)\r\n            self.canvas_window = self.canvas.create_window((0, 0), window=self.items_frame, anchor='nw', width=window_width)\r\n\r\n            # Configurar el desplazamiento con la rueda del rat\u00f3n\r\n            def _on_mousewheel(event):\r\n                self.canvas.yview_scroll(int(-1*(event.delta/120)), \"units\")\r\n\r\n            self.canvas.bind_all(\"<MouseWheel>\", _on_mousewheel)\r\n\r\n            # Asegurar que el ancho del frame interior se ajuste al canvas\r\n            def _configure_inner_frame(event):\r\n                if self.canvas.winfo_exists():\r\n                    self.canvas.itemconfig(self.canvas_window, width=event.width)\r\n            \r\n            self.canvas.bind('<Configure>', _configure_inner_frame)\r\n\r\n            # Hacer la ventana arrastrable\r\n            title_frame.bind('<Button-1>', self.start_move)\r\n            title_frame.bind('<B1-Motion>', self.on_move)\r\n\r\n        else:\r\n            self.content_window.deiconify()  # Muestra la ventana si estaba oculta\r\n            self.content_window.lift()\r\n            self.content_window.attributes('-topmost', True)\r\n            self.content_window.after_idle(self.content_window.attributes, '-topmost', False)\r\n\r\n        # Mostrar items del grupo\r\n        self.refresh_group_content(group_id)\r\n\r\n        # Restaurar la posici\u00f3n del scroll\r\n        if hasattr(self, 'scroll_position'):\r\n            self.canvas.yview_moveto(self.scroll_position)\r\n\r\n    def close_content_window(self, group_id):\r\n        if self.canvas:\r\n            # Guardar la posici\u00f3n actual del scroll\r\n            self.scroll_position = self.canvas.yview()[0]\r\n        self.content_window.withdraw()\r\n        self.clipboard_manager.group_manager.show_groups_window()\r\n\r\n    def start_move(self, event):\r\n        self.x = event.x\r\n        self.y = event.y\r\n\r\n    def on_move(self, event):\r\n        deltax = event.x - self.x\r\n        deltay = event.y - self.y\r\n        x = self.content_window.winfo_x() + deltax\r\n        y = self.content_window.winfo_y() + deltay\r\n        self.content_window.geometry(f\"+{x}+{y}\")",
                        "formatted": {
                            "html": true,
                            "font": "ui-monospace, SFMono-Regular, \"SF Mono\", Menlo, Consolas, \"Liberation Mono\", monospace",
                            "bold": false,
                            "italic": false
                        }
                    }
                }
            ]
        }
    },
    "pinned_items": {
        "b613aa01-13ba-419e-9ef2-ceef812653b4": {
            "text": {
                "text": "close_settings_window",
                "format": {
                    "font": "Consolas, 'Courier New', monospace",
                    "size": null,
                    "color": null,
                    "bold": false,
                    "italic": false,
                    "rtf": null,
                    "html": true,
                    "underline": null,
                    "strikethrough": null,
                    "superscript": null,
                    "subscript": null,
                    "background_color": null,
                    "alignment": null
                }
            },
            "pinned": true,
            "with_format": false
        }
    },
    "settings": {
        "height": 400,
        "width": 295,
        "hotkey": "z"
    }
}